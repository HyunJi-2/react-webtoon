{"version":3,"sources":["container/Main.js","component/Header.js","component/Gnb.js","component/Footer.js","component/WebtoonInfo.js","component/EpisodeList.js","container/WebtoonHome.js","container/Viewer.js","component/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","Component","Header","className","Gnb","props","Link","to","day","Footer","WebtoonInfo","webtoon","src","thumbnail","alt","title","genre","map","g","index","key","score","EpisodeList","episodes","episode","concat","id","thumbnailImage","url","dateCreated","substr","WebtoonHome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","webtoonId","parseInt","match","params","episodeList","_getWebtoon","_getEpisodeList","_this2","axios","get","then","data","setState","webtoons","find","w","catch","error","console","log","_this3","webtoonEpisodes","filter","component_Header","component_Gnb","component_WebtoonInfo","length","component_EpisodeList","component_Footer","Viewer","episodeId","images","img","NoMatch","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.130c3e58.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import Header from \"../component/Header\";\r\n// import Gnb from \"../component/Gnb\";\r\n// import Footer from \"../component/Footer\";\r\n// import WebtoonList from \"../component/WebtoonList\";\r\n\r\nclass Main extends Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     const query = new URLSearchParams(props.location.search);\r\n    //     const day = query.get('day');\r\n\r\n    //     this.state = {\r\n    //         day : day || 'mon', // 디폴트로 월요일\r\n    //         webtoonList : []    // 초기 리스트는 비어있음\r\n    //     };\r\n    // }\r\n    \r\n    // componentDidUpdate(prevProps){\r\n    //     // 요일이 바뀌면 다시 setState 처리\r\n    //     let prevQuery = new URLSearchParams(prevProps.location.search);\r\n    //     let prevDay = prevQuery.get('day');\r\n\r\n    //     let query = new URLSearchParams(this.props.location.search);\r\n    //     let day = query.get('day');\r\n\r\n    //     if(prevDay !== day){\r\n    //         this.setState({\r\n    //             day\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this._getList();\r\n    // }\r\n\r\n    // _getList(){\r\n    //     // webtoon_list를 가지고 옴\r\n    //     const apiUrl = '/dummy/webtoon_list.json';\r\n\r\n    //     axios.get(apiUrl)\r\n    //         .then(data => {\r\n    //             // 가지고 온 리스트를 state에 저장함\r\n    //             this.setState({\r\n    //                 webtoonList : data.data.webtoonList\r\n    //             });\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //         });\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>h1</h1>\r\n                {/* <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoonList.length > 0 ? (\r\n                    <WebtoonList list={\r\n                        this.state.webtoonList.filter(webtoon => (\r\n                            webtoon.day === this.state.day\r\n                        ))\r\n                    } />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        WEBTOON\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Gnb = (props) => (\r\n    <ul className=\"gnb\">\r\n        <li><Link to=\"/?day=mon\" className={ props.day === 'mon' ? 'tab_day on' : 'tab_day' }>월요일</Link></li>\r\n        <li><Link to=\"/?day=tue\" className={ props.day === 'tue' ? 'tab_day on' : 'tab_day' }>화요일</Link></li>\r\n        <li><Link to=\"/?day=wed\" className={ props.day === 'wed' ? 'tab_day on' : 'tab_day' }>수요일</Link></li>\r\n        <li><Link to=\"/?day=thu\" className={ props.day === 'thu' ? 'tab_day on' : 'tab_day' }>목요일</Link></li>\r\n        <li><Link to=\"/?day=fri\" className={ props.day === 'fri' ? 'tab_day on' : 'tab_day' }>금요일</Link></li>\r\n        <li><Link to=\"/?day=sat\" className={ props.day === 'sat' ? 'tab_day on' : 'tab_day' }>토요일</Link></li>\r\n        <li><Link to=\"/?day=sun\" className={ props.day === 'sun' ? 'tab_day on' : 'tab_day' }>일요일</Link></li>\r\n    </ul>\r\n)\r\n\r\nexport default Gnb;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        &copy; HyunJi-2\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst WebtoonInfo = (props) => {\r\n    const webtoon = props.webtoon;\r\n    return (\r\n        <div className=\"wrap_webtoon\">\r\n            <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title} />\r\n            <div className=\"info_webtoon\">\r\n                <strong className=\"tit_webtoon\">{webtoon.title}</strong>\r\n                { webtoon.genre.map((g, index) => (\r\n                    <span key={index} className=\"txt_genre\">{g}</span>\r\n                )) }\r\n                <span className=\"num_score\">평점 : {webtoon.score}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebtoonInfo;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst EpisodeList = (props) => {\r\n    return (\r\n        <ul className=\"list_webtoon list_episode\">\r\n            { props.episodes.map((episode, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/viewer/${episode.id}`} className=\"link_webtoon\">\r\n                        <img src={episode.thumbnailImage.url} className=\"img_webtoon\" alt={episode.title} />\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {episode.title}\r\n                            </strong>\r\n                            {`${episode.dateCreated.substr(0,4)}.${episode.dateCreated.substr(4,2)}.${episode.dateCreated.substr(6,2)}`}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default EpisodeList;","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport Header from \"../component/Header\";\r\nimport Gnb from \"../component/Gnb\";\r\nimport Footer from \"../component/Footer\";\r\nimport WebtoonInfo from \"../component/WebtoonInfo\";\r\nimport EpisodeList from \"../component/EpisodeList\";\r\n\r\nclass WebtoonHome extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            webtoonId : parseInt(props.match.params.webtoonId, 10), // webtoonId를 얻어서 숫자로 변환\r\n            webtoon : {},       // 웹툰 상세 객체\r\n            episodeList : []    // 에피소드 리스트\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getWebtoon();\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getWebtoon(){\r\n        const apiUrl = '/dummy/webtoon_detail.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰들 중 ID가 일치하는 웹툰을 state.webtoon에 저장\r\n                this.setState({\r\n                    webtoon : data.data.webtoons.find(w => (\r\n                        w.id === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰ID가 일치하는 에피소드들만 state.episodeList 에 저장\r\n                this.setState({\r\n                    episodeList : data.data.webtoonEpisodes.filter(episode => (\r\n                        episode.webtoonId === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoon.id ? (\r\n                    <WebtoonInfo webtoon={this.state.webtoon} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                { this.state.episodeList.length > 0 ? (\r\n                    <EpisodeList episodes={this.state.episodeList} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WebtoonHome;","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Viewer extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            episodeId : parseInt(props.match.params.episodeId, 10),\r\n            episode : {}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                this.setState({\r\n                    episode : data.data.webtoonEpisodes.find(episode => (\r\n                        episode.id === this.state.episodeId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render(){\r\n        const episode = this.state.episode;\r\n        return (\r\n            <div className=\"wrap_viewer\">\r\n            { episode.id ? (\r\n                <div>\r\n                    <div className=\"top_viewer\">\r\n                        {episode.title}\r\n                        <Link to={`/webtoon/${episode.webtoonId}`} className=\"btn_close\">X</Link>\r\n                    </div>\r\n                    <div className=\"wrap_images\">\r\n                        { episode.images.map((img, index) => (\r\n                            <img key={index} src={img} alt=\"\" />\r\n                        )) }\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <span>LOADING...</span>\r\n            ) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Viewer;","import React from 'react';\r\n\r\nconst NoMatch = () => (\r\n    <h1 className=\"header\">\r\n        NoMatch\r\n    </h1>\r\n)\r\n\r\nexport default NoMatch;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\nimport Main from './container/Main';\r\nimport WebtoonHome from './container/WebtoonHome';\r\nimport Viewer from './container/Viewer';\r\nimport NoMatch from './component/NoMatch'\r\n\r\nclass App extends Component {\r\n  render() {\r\n      console.log(\"test\");\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route path=\"/webtoon/:webtoonId\" component={WebtoonHome} />\r\n          <Route path=\"/viewer/:episodeId\" component={Viewer} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}