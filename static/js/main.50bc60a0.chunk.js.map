{"version":3,"sources":["container/Main.js","component/Header.js","component/Gnb.js","component/Footer.js","component/WebtoonInfo.js","component/EpisodeList.js","App.js","container/WebtoonHome.js","container/Viewer.js","serviceWorker.js","index.js"],"names":["Main","console","log","react_default","a","createElement","Component","Header","className","Gnb","props","Link","to","day","Footer","WebtoonInfo","webtoon","src","thumbnail","alt","title","genre","map","g","index","key","score","EpisodeList","episodes","episode","concat","id","thumbnailImage","url","dateCreated","substr","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50bc60a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import Header from \"../component/Header\";\r\n// import Gnb from \"../component/Gnb\";\r\n// import Footer from \"../component/Footer\";\r\n// import WebtoonList from \"../component/WebtoonList\";\r\n\r\nclass Main extends Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n    //\r\n    //     const query = new URLSearchParams(props.location.search);\r\n    //     const day = query.get('day');\r\n    //\r\n    //     this.state = {\r\n    //         day : day || 'mon', // 디폴트로 월요일\r\n    //         webtoonList : []    // 초기 리스트는 비어있음\r\n    //     };\r\n    // }\r\n    //\r\n    // componentDidUpdate(prevProps){\r\n    //     // 요일이 바뀌면 다시 setState 처리\r\n    //     let prevQuery = new URLSearchParams(prevProps.location.search);\r\n    //     let prevDay = prevQuery.get('day');\r\n    //\r\n    //     let query = new URLSearchParams(this.props.location.search);\r\n    //     let day = query.get('day');\r\n    //\r\n    //     if(prevDay !== day){\r\n    //         this.setState({\r\n    //             day\r\n    //         })\r\n    //     }\r\n    // }\r\n    //\r\n    // componentDidMount(){\r\n    //     this._getList();\r\n    // }\r\n    //\r\n    // _getList(){\r\n    //     // webtoon_list를 가지고 옴\r\n    //     const apiUrl = '/dummy/webtoon_list.json';\r\n    //\r\n    //     axios.get(apiUrl)\r\n    //         .then(data => {\r\n    //             // 가지고 온 리스트를 state에 저장함\r\n    //             this.setState({\r\n    //                 webtoonList : data.data.webtoonList\r\n    //             });\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //         });\r\n    // }\r\n\r\n    render(){\r\n        console.log(\"main.js\");\r\n        return (\r\n            <div>\r\n                <h1>Main!!!!</h1>\r\n                {/*<Header />*/}\r\n                {/*<Gnb day={this.state.day} />*/}\r\n\r\n                {/*{ this.state.webtoonList.length > 0 ? (*/}\r\n                    {/*<WebtoonList list={*/}\r\n                        {/*this.state.webtoonList.filter(webtoon => (*/}\r\n                            {/*webtoon.day === this.state.day*/}\r\n                        {/*))*/}\r\n                    {/*} />*/}\r\n                {/*) : (*/}\r\n                    {/*<span>LOADING...</span>*/}\r\n                {/*) }*/}\r\n\r\n                {/*<Footer />*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        WEBTOON\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Gnb = (props) => (\r\n    <ul className=\"gnb\">\r\n        <li><Link to=\"/?day=mon\" className={ props.day === 'mon' ? 'tab_day on' : 'tab_day' }>월요일</Link></li>\r\n        <li><Link to=\"/?day=tue\" className={ props.day === 'tue' ? 'tab_day on' : 'tab_day' }>화요일</Link></li>\r\n        <li><Link to=\"/?day=wed\" className={ props.day === 'wed' ? 'tab_day on' : 'tab_day' }>수요일</Link></li>\r\n        <li><Link to=\"/?day=thu\" className={ props.day === 'thu' ? 'tab_day on' : 'tab_day' }>목요일</Link></li>\r\n        <li><Link to=\"/?day=fri\" className={ props.day === 'fri' ? 'tab_day on' : 'tab_day' }>금요일</Link></li>\r\n        <li><Link to=\"/?day=sat\" className={ props.day === 'sat' ? 'tab_day on' : 'tab_day' }>토요일</Link></li>\r\n        <li><Link to=\"/?day=sun\" className={ props.day === 'sun' ? 'tab_day on' : 'tab_day' }>일요일</Link></li>\r\n    </ul>\r\n)\r\n\r\nexport default Gnb;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        &copy; HyunJi-2\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst WebtoonInfo = (props) => {\r\n    const webtoon = props.webtoon;\r\n    return (\r\n        <div className=\"wrap_webtoon\">\r\n            <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title} />\r\n            <div className=\"info_webtoon\">\r\n                <strong className=\"tit_webtoon\">{webtoon.title}</strong>\r\n                { webtoon.genre.map((g, index) => (\r\n                    <span key={index} className=\"txt_genre\">{g}</span>\r\n                )) }\r\n                <span className=\"num_score\">평점 : {webtoon.score}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebtoonInfo;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst EpisodeList = (props) => {\r\n    return (\r\n        <ul className=\"list_webtoon list_episode\">\r\n            { props.episodes.map((episode, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/viewer/${episode.id}`} className=\"link_webtoon\">\r\n                        <img src={episode.thumbnailImage.url} className=\"img_webtoon\" alt={episode.title} />\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {episode.title}\r\n                            </strong>\r\n                            {`${episode.dateCreated.substr(0,4)}.${episode.dateCreated.substr(4,2)}.${episode.dateCreated.substr(6,2)}`}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default EpisodeList;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport Main from './container/Main';\nimport WebtoonHome from './container/WebtoonHome';\nimport Viewer from './container/Viewer';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <h1>Router</h1>\n                    <Route exact path=\"/\" component={Main} />\n                    {/*<Route path=\"/webtoon/:webtoonId\" component={WebtoonHome} />*/}\n                    {/*<Route path=\"/viewer/:episodeId\" component={Viewer} />*/}\n                </div>\n            </Router>\n        );\n        console.log(\"end\");\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport Header from \"../component/Header\";\r\nimport Gnb from \"../component/Gnb\";\r\nimport Footer from \"../component/Footer\";\r\nimport WebtoonInfo from \"../component/WebtoonInfo\";\r\nimport EpisodeList from \"../component/EpisodeList\";\r\n\r\nclass WebtoonHome extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            webtoonId : parseInt(props.match.params.webtoonId, 10), // webtoonId를 얻어서 숫자로 변환\r\n            webtoon : {},       // 웹툰 상세 객체\r\n            episodeList : []    // 에피소드 리스트\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getWebtoon();\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getWebtoon(){\r\n        const apiUrl = '/dummy/webtoon_detail.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰들 중 ID가 일치하는 웹툰을 state.webtoon에 저장\r\n                this.setState({\r\n                    webtoon : data.data.webtoons.find(w => (\r\n                        w.id === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰ID가 일치하는 에피소드들만 state.episodeList 에 저장\r\n                this.setState({\r\n                    episodeList : data.data.webtoonEpisodes.filter(episode => (\r\n                        episode.webtoonId === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoon.id ? (\r\n                    <WebtoonInfo webtoon={this.state.webtoon} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                { this.state.episodeList.length > 0 ? (\r\n                    <EpisodeList episodes={this.state.episodeList} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WebtoonHome;","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Viewer extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            episodeId : parseInt(props.match.params.episodeId, 10),\r\n            episode : {}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                this.setState({\r\n                    episode : data.data.webtoonEpisodes.find(episode => (\r\n                        episode.id === this.state.episodeId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render(){\r\n        const episode = this.state.episode;\r\n        return (\r\n            <div className=\"wrap_viewer\">\r\n            { episode.id ? (\r\n                <div>\r\n                    <div className=\"top_viewer\">\r\n                        {episode.title}\r\n                        <Link to={`/webtoon/${episode.webtoonId}`} className=\"btn_close\">X</Link>\r\n                    </div>\r\n                    <div className=\"wrap_images\">\r\n                        { episode.images.map((img, index) => (\r\n                            <img key={index} src={img} alt=\"\" />\r\n                        )) }\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <span>LOADING...</span>\r\n            ) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Viewer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}