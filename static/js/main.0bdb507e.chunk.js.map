{"version":3,"sources":["container/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","Component","App","console","log","BrowserRouter","basename","process","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QA8EeA,gMAtBP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBAnDGC,cCiBJC,mLAZX,OADEC,QAAQC,IAAI,QAEVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,SAAUC,kBAChBT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,aAN3BI,aCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0bdb507e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import Header from \"../component/Header\";\r\n// import Gnb from \"../component/Gnb\";\r\n// import Footer from \"../component/Footer\";\r\n// import WebtoonList from \"../component/WebtoonList\";\r\n\r\nclass Main extends Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     const query = new URLSearchParams(props.location.search);\r\n    //     const day = query.get('day');\r\n\r\n    //     this.state = {\r\n    //         day : day || 'mon', // 디폴트로 월요일\r\n    //         webtoonList : []    // 초기 리스트는 비어있음\r\n    //     };\r\n    // }\r\n    \r\n    // componentDidUpdate(prevProps){\r\n    //     // 요일이 바뀌면 다시 setState 처리\r\n    //     let prevQuery = new URLSearchParams(prevProps.location.search);\r\n    //     let prevDay = prevQuery.get('day');\r\n\r\n    //     let query = new URLSearchParams(this.props.location.search);\r\n    //     let day = query.get('day');\r\n\r\n    //     if(prevDay !== day){\r\n    //         this.setState({\r\n    //             day\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this._getList();\r\n    // }\r\n\r\n    // _getList(){\r\n    //     // webtoon_list를 가지고 옴\r\n    //     const apiUrl = '/dummy/webtoon_list.json';\r\n\r\n    //     axios.get(apiUrl)\r\n    //         .then(data => {\r\n    //             // 가지고 온 리스트를 state에 저장함\r\n    //             this.setState({\r\n    //                 webtoonList : data.data.webtoonList\r\n    //             });\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //         });\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>h1</h1>\r\n                {/* <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoonList.length > 0 ? (\r\n                    <WebtoonList list={\r\n                        this.state.webtoonList.filter(webtoon => (\r\n                            webtoon.day === this.state.day\r\n                        ))\r\n                    } />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\nimport Main from './container/Main';\r\n// import WebtoonHome from './container/WebtoonHome';\r\n// import Viewer from './container/Viewer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n      console.log(\"test\");\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <div>\r\n            <Route exact path=\"/\" component={Main} />\r\n            {/* <Route path=\"/webtoon/:webtoonId\" component={WebtoonHome} />\r\n            <Route path=\"/viewer/:episodeId\" component={Viewer} /> */}\r\n          </div>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}