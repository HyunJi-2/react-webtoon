{"version":3,"sources":["component/Header.js","component/Gnb.js","component/Footer.js","component/WebtoonList.js","container/Main.js","component/WebtoonInfo.js","component/EpisodeList.js","container/WebtoonHome.js","container/Viewer.js","component/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Gnb","props","Link","to","day","Footer","WebtoonList","list","map","webtoon","index","key","concat","id","src","thumbnail","alt","title","artist","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","URLSearchParams","location","search","get","state","webtoonList","prevProps","prevDay","setState","_getList","_this2","axios","then","data","catch","error","console","log","_this3","component_Header","component_Gnb","length","component_WebtoonList","filter","component_Footer","Component","WebtoonInfo","genre","g","score","EpisodeList","episodes","episode","thumbnailImage","url","dateCreated","substr","WebtoonHome","webtoonId","parseInt","match","params","episodeList","_getWebtoon","_getEpisodeList","webtoons","find","w","webtoonEpisodes","component_WebtoonInfo","component_EpisodeList","Viewer","episodeId","images","img","NoMatch","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.780a8904.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        WEBTOON\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Gnb = (props) => (\r\n    <ul className=\"gnb\">\r\n        <li><Link to=\"/?day=mon\" className={ props.day === 'mon' ? 'tab_day on' : 'tab_day' }>월요일</Link></li>\r\n        <li><Link to=\"/?day=tue\" className={ props.day === 'tue' ? 'tab_day on' : 'tab_day' }>화요일</Link></li>\r\n        <li><Link to=\"/?day=wed\" className={ props.day === 'wed' ? 'tab_day on' : 'tab_day' }>수요일</Link></li>\r\n        <li><Link to=\"/?day=thu\" className={ props.day === 'thu' ? 'tab_day on' : 'tab_day' }>목요일</Link></li>\r\n        <li><Link to=\"/?day=fri\" className={ props.day === 'fri' ? 'tab_day on' : 'tab_day' }>금요일</Link></li>\r\n        <li><Link to=\"/?day=sat\" className={ props.day === 'sat' ? 'tab_day on' : 'tab_day' }>토요일</Link></li>\r\n        <li><Link to=\"/?day=sun\" className={ props.day === 'sun' ? 'tab_day on' : 'tab_day' }>일요일</Link></li>\r\n    </ul>\r\n)\r\n\r\nexport default Gnb;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        &copy; HyunJi-2\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst WebtoonList = (props) => {\r\n    return (\r\n        <ul className=\"list_webtoon\">\r\n            { props.list.map((webtoon, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/webtoon/${webtoon.id}`} className=\"link_webtoon\">\r\n                        <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title} />\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {webtoon.title}\r\n                            </strong>\r\n                            {webtoon.artist}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default WebtoonList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Header from \"../component/Header\";\r\nimport Gnb from \"../component/Gnb\";\r\nimport Footer from \"../component/Footer\";\r\nimport WebtoonList from \"../component/WebtoonList\";\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const query = new URLSearchParams(props.location.search);\r\n        const day = query.get('day');\r\n\r\n        this.state = {\r\n            day : day || 'mon', // 디폴트로 월요일\r\n            webtoonList : []    // 초기 리스트는 비어있음\r\n        };\r\n    }\r\n    \r\n    componentDidUpdate(prevProps){\r\n        // 요일이 바뀌면 다시 setState 처리\r\n        let prevQuery = new URLSearchParams(prevProps.location.search);\r\n        let prevDay = prevQuery.get('day');\r\n\r\n        let query = new URLSearchParams(this.props.location.search);\r\n        let day = query.get('day');\r\n\r\n        if(prevDay !== day){\r\n            this.setState({\r\n                day\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getList();\r\n    }\r\n\r\n    _getList(){\r\n        // webtoon_list를 가지고 옴\r\n        const apiUrl = '/dummy/webtoon_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 가지고 온 리스트를 state에 저장함\r\n                this.setState({\r\n                    webtoonList : data.data.webtoonList\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoonList.length > 0 ? (\r\n                    <WebtoonList list={\r\n                        this.state.webtoonList.filter(webtoon => (\r\n                            webtoon.day === this.state.day\r\n                        ))\r\n                    } />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst WebtoonInfo = (props) => {\r\n    const webtoon = props.webtoon;\r\n    return (\r\n        <div className=\"wrap_webtoon\">\r\n            <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title} />\r\n            <div className=\"info_webtoon\">\r\n                <strong className=\"tit_webtoon\">{webtoon.title}</strong>\r\n                { webtoon.genre.map((g, index) => (\r\n                    <span key={index} className=\"txt_genre\">{g}</span>\r\n                )) }\r\n                <span className=\"num_score\">평점 : {webtoon.score}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebtoonInfo;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst EpisodeList = (props) => {\r\n    return (\r\n        <ul className=\"list_webtoon list_episode\">\r\n            { props.episodes.map((episode, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/viewer/${episode.id}`} className=\"link_webtoon\">\r\n                        <img src={episode.thumbnailImage.url} className=\"img_webtoon\" alt={episode.title} />\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {episode.title}\r\n                            </strong>\r\n                            {`${episode.dateCreated.substr(0,4)}.${episode.dateCreated.substr(4,2)}.${episode.dateCreated.substr(6,2)}`}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default EpisodeList;","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport Header from \"../component/Header\";\r\nimport Gnb from \"../component/Gnb\";\r\nimport Footer from \"../component/Footer\";\r\nimport WebtoonInfo from \"../component/WebtoonInfo\";\r\nimport EpisodeList from \"../component/EpisodeList\";\r\n\r\nclass WebtoonHome extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            webtoonId : parseInt(props.match.params.webtoonId, 10), // webtoonId를 얻어서 숫자로 변환\r\n            webtoon : {},       // 웹툰 상세 객체\r\n            episodeList : []    // 에피소드 리스트\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getWebtoon();\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getWebtoon(){\r\n        const apiUrl = '/dummy/webtoon_detail.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰들 중 ID가 일치하는 웹툰을 state.webtoon에 저장\r\n                this.setState({\r\n                    webtoon : data.data.webtoons.find(w => (\r\n                        w.id === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                // 웹툰ID가 일치하는 에피소드들만 state.episodeList 에 저장\r\n                this.setState({\r\n                    episodeList : data.data.webtoonEpisodes.filter(episode => (\r\n                        episode.webtoonId === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Gnb day={this.state.day} />\r\n\r\n                { this.state.webtoon.id ? (\r\n                    <WebtoonInfo webtoon={this.state.webtoon} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                { this.state.episodeList.length > 0 ? (\r\n                    <EpisodeList episodes={this.state.episodeList} />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                ) }\r\n\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WebtoonHome;","import React, { Component } from 'react';\r\nimport axios from \"axios/index\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Viewer extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            episodeId : parseInt(props.match.params.episodeId, 10),\r\n            episode : {}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                this.setState({\r\n                    episode : data.data.webtoonEpisodes.find(episode => (\r\n                        episode.id === this.state.episodeId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render(){\r\n        const episode = this.state.episode;\r\n        return (\r\n            <div className=\"wrap_viewer\">\r\n            { episode.id ? (\r\n                <div>\r\n                    <div className=\"top_viewer\">\r\n                        {episode.title}\r\n                        <Link to={`/webtoon/${episode.webtoonId}`} className=\"btn_close\">X</Link>\r\n                    </div>\r\n                    <div className=\"wrap_images\">\r\n                        { episode.images.map((img, index) => (\r\n                            <img key={index} src={img} alt=\"\" />\r\n                        )) }\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <span>LOADING...</span>\r\n            ) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Viewer;","import React from 'react';\r\n\r\nconst NoMatch = () => (\r\n    <h1 className=\"header\">\r\n        NoMatch\r\n    </h1>\r\n)\r\n\r\nexport default NoMatch;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\nimport Main from './container/Main';\r\nimport WebtoonHome from './container/WebtoonHome';\r\nimport Viewer from './container/Viewer';\r\nimport NoMatch from './component/NoMatch'\r\n\r\nclass App extends Component {\r\n  render() {\r\n      console.log(\"test\");\r\n    return (\r\n        <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route path=\"/webtoon/:webtoonId\" component={WebtoonHome} />\r\n          <Route path=\"/viewer/:episodeId\" component={Viewer} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}